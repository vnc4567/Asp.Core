Š
EC:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Common\IEntity.cs
	namespace 	
Domain
 
. 
Common 
{ 
public 

	interface 
IEntity 
{ 
int		 
Id		 
{		 
get		 
;		 
set		 
;		 
}		 
} 
} ý

DC:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Dollar\Dollar.cs
	namespace 	
Domain
 
. 
Dollar 
{ 
public 

class 
Dollar 
{ 
public		 
Dollar		 
(		 
decimal		 
amount		 $
)		$ %
{

 	
Amount 
= 
amount 
; 
} 	
private 
decimal 
Amount 
{  
get" %
;% &
set( +
;+ ,
}- .
public 
Dollar 
Times 
( 
decimal #

multiplier$ .
). /
{ 	
return 
new 
Dollar 
( 
this "
." #
Amount# )
** +

multiplier, 6
)6 7
;7 8
} 	
public 
override 
bool 
Equals #
(# $
Object$ *
dollar+ 1
)1 2
{ 	
return 
this 
. 
Amount 
==  
(  !
(! "
Dollar" (
)( )
dollar* 0
)0 1
.1 2
Amount2 8
;8 9
} 	
} 
} Ž	
=C:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Person.cs
	namespace 	
Domain
 
{ 
public 

class 
Person 
: 
IEntity !
{ 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
public 
string 
Name 
{ 
get  
;  !
set" %
;% &
}' (
public		 
string		 
Email		 
{		 
get		 !
;		! "
set		# &
;		& '
}		( )
public

 
int

 
Age

 
{

 
get

 
;

 
set

 !
;

! "
}

# $
public 
string 
Adresse 
{ 
get  #
;# $
set% (
;( )
}* +
public 
string 
Adresse2 
{  
get! $
;$ %
set& )
;) *
}+ ,
} 
} È
VC:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Specifications\AndSpecification.cs
	namespace 	
Domain
 
. 
Specifications 
{ 
public 

class 
AndSpecification !
<! "
T" #
># $
:% &
Specification' 4
<4 5
T5 6
>6 7
{		 
private

 
readonly

 
Specification

 &
<

& '
T

' (
>

( )
_left

* /
;

/ 0
private 
readonly 
Specification &
<& '
T' (
>( )
_right* 0
;0 1
public 
AndSpecification 
(  
Specification  -
<- .
T. /
>/ 0
left1 5
,5 6
Specification7 D
<D E
TE F
>F G
rightH M
)M N
{ 	
_right 
= 
right 
; 
_left 
= 
left 
; 
} 	
public 
override 

Expression "
<" #
Func# '
<' (
T( )
,) *
bool+ /
>/ 0
>0 1
ToExpression2 >
(> ?
)? @
{ 	

Expression 
< 
Func 
< 
T 
, 
bool #
># $
>$ %
leftExpression& 4
=5 6
_left7 <
.< =
ToExpression= I
(I J
)J K
;K L

Expression 
< 
Func 
< 
T 
, 
bool #
># $
>$ %
rightExpression& 5
=6 7
_right8 >
.> ?
ToExpression? K
(K L
)L M
;M N
var 
	paramExpr 
= 

Expression &
.& '
	Parameter' 0
(0 1
typeof1 7
(7 8
T8 9
)9 :
): ;
;; <
var 
exprBody 
= 

Expression %
.% &
AndAlso& -
(- .
leftExpression. <
.< =
Body= A
,A B
rightExpressionC R
.R S
BodyS W
)W X
;X Y
exprBody 
= 
( 
BinaryExpression (
)( )
new) ,
ParameterReplacer- >
(> ?
	paramExpr? H
)H I
.I J
VisitJ O
(O P
exprBodyP X
)X Y
;Y Z
var 
	finalExpr 
= 

Expression &
.& '
Lambda' -
<- .
Func. 2
<2 3
T3 4
,4 5
bool6 :
>: ;
>; <
(< =
exprBody= E
,E F
	paramExprG P
)P Q
;Q R
return 
	finalExpr 
; 
} 	
}   
}"" º
UC:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Specifications\OrSpecification.cs
	namespace 	
Domain
 
. 
Specifications 
{ 
public		 

class		 
OrSpecification		  
<		  !
T		! "
>		" #
:		$ %
Specification		& 3
<		3 4
T		4 5
>		5 6
{

 
private 
readonly 
Specification &
<& '
T' (
>( )
_left* /
;/ 0
private 
readonly 
Specification &
<& '
T' (
>( )
_right* 0
;0 1
public 
OrSpecification 
( 
Specification ,
<, -
T- .
>. /
left0 4
,4 5
Specification6 C
<C D
TD E
>E F
rightG L
)L M
{ 	
_right 
= 
right 
; 
_left 
= 
left 
; 
} 	
public 
override 

Expression "
<" #
Func# '
<' (
T( )
,) *
bool+ /
>/ 0
>0 1
ToExpression2 >
(> ?
)? @
{ 	
var 
leftExpression 
=  
_left! &
.& '
ToExpression' 3
(3 4
)4 5
;5 6
var 
rightExpression 
=  !
_right" (
.( )
ToExpression) 5
(5 6
)6 7
;7 8
var 
	paramExpr 
= 

Expression &
.& '
	Parameter' 0
(0 1
typeof1 7
(7 8
T8 9
)9 :
): ;
;; <
var 
exprBody 
= 

Expression %
.% &
OrElse& ,
(, -
leftExpression- ;
.; <
Body< @
,@ A
rightExpressionB Q
.Q R
BodyR V
)V W
;W X
exprBody 
= 
( 
BinaryExpression (
)( )
new) ,
ParameterReplacer- >
(> ?
	paramExpr? H
)H I
.I J
VisitJ O
(O P
exprBodyP X
)X Y
;Y Z
var 
	finalExpr 
= 

Expression &
.& '
Lambda' -
<- .
Func. 2
<2 3
T3 4
,4 5
bool6 :
>: ;
>; <
(< =
exprBody= E
,E F
	paramExprG P
)P Q
;Q R
return 
	finalExpr 
; 
} 	
} 
}   ˆ
WC:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Specifications\ParameterReplacer.cs
	namespace 	
Domain
 
. 
Specifications 
{ 
internal 
class 
ParameterReplacer $
:% &
ExpressionVisitor' 8
{ 
private 
readonly 
ParameterExpression ,

_parameter- 7
;7 8
	protected		 
override		 

Expression		 %
VisitParameter		& 4
(		4 5
ParameterExpression		5 H
node		I M
)		M N
=>

 
base

 
.

 
VisitParameter

 "
(

" #

_parameter

# -
)

- .
;

. /
internal 
ParameterReplacer "
(" #
ParameterExpression# 6
	parameter7 @
)@ A
{ 	

_parameter 
= 
	parameter "
;" #
} 	
} 
} Ð
SC:\Users\benaz\source\repos\Asp.Core\WebTest\Domain\Specifications\Specification.cs
	namespace 	
Domain
 
. 
Specifications 
{ 
public 

abstract 
class 
Specification '
<' (
T( )
>) *
{		 
public 
abstract 

Expression "
<" #
Func# '
<' (
T( )
,) *
bool+ /
>/ 0
>0 1
ToExpression2 >
(> ?
)? @
;@ A
public 
bool 
IsSatisfiedBy !
(! "
T" #
entity$ *
)* +
{ 	
Func 
< 
T 
, 
bool 
> 
	predicate #
=$ %
ToExpression& 2
(2 3
)3 4
.4 5
Compile5 <
(< =
)= >
;> ?
return 
	predicate 
( 
entity #
)# $
;$ %
} 	
public 
Specification 
< 
T 
> 
And  #
(# $
Specification$ 1
<1 2
T2 3
>3 4
specification5 B
)B C
{ 	
return 
new 
AndSpecification '
<' (
T( )
>) *
(* +
this+ /
,/ 0
specification1 >
)> ?
;? @
} 	
public 
Specification 
< 
T 
> 
Or  "
(" #
Specification# 0
<0 1
T1 2
>2 3
specification4 A
)A B
{ 	
return 
new 
OrSpecification &
<& '
T' (
>( )
() *
this* .
,. /
specification0 =
)= >
;> ?
} 	
} 
} 